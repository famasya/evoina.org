---
import {
  getAlternateLocale,
  getLocalizedUrl,
  removeLocaleFromPath,
  type SupportedLocale,
  type Translations,
} from "../i18n";

interface Props {
  currentLocale: SupportedLocale;
  translations: Translations;
}

const { currentLocale, translations } = Astro.props;

// Simple navigation items using consistent route names
const mainNavigations = [
  {
    name: translations.navigation.about,
    href: getLocalizedUrl("about", currentLocale),
  },
  {
    name: translations.navigation.programs,
    href: getLocalizedUrl("programs", currentLocale),
  },
  {
    name: translations.navigation.committee_chairs,
    href: getLocalizedUrl("committee-chairs", currentLocale),
  },
  {
    name: translations.navigation.resources,
    href: getLocalizedUrl("resources", currentLocale),
  },
  {
    name: translations.navigation.archives,
    href: getLocalizedUrl("archives", currentLocale),
  },
];

// Get current path without locale for language switching
const currentPath = removeLocaleFromPath(Astro.url.pathname);
const alternateLocale = getAlternateLocale(currentLocale);

// Generate URLs for language switching - use the same path for both locales
const alternateUrl = getLocalizedUrl(currentPath, alternateLocale);
const currentUrl = getLocalizedUrl(currentPath, currentLocale);
---

<header class="absolute top-0 left-0 right-0 z-50 text-white">
  <div
    class="bg-gradient-to-b from-black/80 to-transparent px-4 md:px-8 lg:px-16"
  >
    <!-- Top Bar -->
    <div
      class="flex justify-between items-center py-2 border-b border-white/20"
    >
      <div class="flex items-center text-base">
        <a
          href={getLocalizedUrl("", currentLocale)}
          class="hover:text-gray-300 transition-colors"
        >
          <strong>evoina</strong>.org
        </a>
      </div>
      <div class="flex items-center gap-4">
        <div class="hidden md:flex items-center gap-2 text-sm">
          <a
            href={getLocalizedUrl(currentPath, "en")}
            class={`hover:text-gray-300 transition-colors ${currentLocale === "en" ? "font-bold text-white" : "text-gray-400"}`}
          >
            EN
          </a>
          <a
            href={getLocalizedUrl(currentPath, "id")}
            class={`hover:text-gray-300 transition-colors ${currentLocale === "id" ? "font-bold text-white" : "text-gray-400"}`}
          >
            ID
          </a>
        </div>
        <!-- Mobile menu button -->
        <button
          id="menu-toggle-btn"
          class="md:hidden p-2 text-white focus:outline-none"
          aria-label="Toggle menu"
        >
          <div class="w-6 flex flex-col gap-1.5">
            <span class="block h-0.5 bg-white transition-all duration-300"
            ></span>
            <span
              class="block h-0.5 bg-white transition-all duration-300 opacity-100"
            ></span>
            <span class="block h-0.5 bg-white transition-all duration-300"
            ></span>
          </div>
        </button>
      </div>
    </div>

    <!-- Desktop Navigation -->
    <div class="hidden md:flex justify-between items-center py-4">
      <div class="flex flex-row gap-6 items-center">
        <a
          href={getLocalizedUrl("", currentLocale)}
          class="hover:text-gray-300 transition-colors bg-white rounded-md px-4 py-2"
        >
          <img src="/ises1.png" alt="ISES" class="h-12 lg:h-16" />
        </a>
        <nav class="hidden md:flex items-center gap-6">
          {
            mainNavigations.map((nav) => (
              <a
                href={nav.href}
                class="hover:text-gray-300 font-semibold transition-colors"
              >
                {nav.name}
              </a>
            ))
          }
        </nav>
      </div>
      <div class="hidden md:flex items-center">
        <a
          href="#"
          class="bg-white hover:bg-gray-100 text-black rounded-md px-4 py-2 text-sm font-semibold flex items-center gap-2 transition-colors"
        >
          {translations.buttons.join_us}
          <span>&rarr;</span>
        </a>
      </div>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="fixed inset-0 bg-black/90 z-40 transform transition-all duration-300 ease-in-out translate-x-full"
  >
    <div class="container mx-auto px-4 py-8 h-full flex flex-col">
      <div class="flex justify-end py-4">
        <button
          id="menu-close-btn"
          class="text-white p-2"
          aria-label="Close menu"
        >
          âœ•
        </button>
      </div>
      <nav
        class="flex-1 flex flex-col items-center justify-center gap-8 text-xl"
      >
        {
          mainNavigations.map((nav) => (
            <a
              href={nav.href}
              class="mobile-nav-link hover:text-gray-300 font-semibold transition-colors"
            >
              {nav.name}
            </a>
          ))
        }
        <div class="flex items-center gap-4 mt-8">
          <a
            href={getLocalizedUrl(currentPath, "en")}
            class={`hover:text-gray-300 transition-colors ${currentLocale === "en" ? "font-bold text-white" : "text-gray-400"}`}
          >
            EN
          </a>
          <a
            href={getLocalizedUrl(currentPath, "id")}
            class={`hover:text-gray-300 transition-colors ${currentLocale === "id" ? "font-bold text-white" : "text-gray-400"}`}
          >
            ID
          </a>
        </div>
        <a
          href="#"
          class="bg-white hover:bg-gray-100 text-black rounded-md px-6 py-3 font-semibold flex items-center gap-2 transition-colors mt-4"
        >
          {translations.buttons.join_us}
          <span>&rarr;</span>
        </a>
      </nav>
    </div>
  </div>
</header>
<script is:inline>
  // This script is designed to be idempotent and work with Astro View Transitions.
  // It adds a single delegated event listener to the document and runs only once.
  if (!document.body.hasAttribute("data-header-listeners-attached")) {
    document.body.setAttribute("data-header-listeners-attached", "true");

    const setMenuState = (isOpen) => {
      const mobileMenu = document.getElementById("mobile-menu");
      const menuToggleBtn = document.getElementById("menu-toggle-btn");
      if (!mobileMenu || !menuToggleBtn) return;

      mobileMenu.classList.toggle("translate-x-full", !isOpen);
      mobileMenu.classList.toggle("translate-x-0", isOpen);
      document.body.style.overflow = isOpen ? "hidden" : "";

      const iconSpans = menuToggleBtn.querySelectorAll("span");
      if (iconSpans.length === 3) {
        iconSpans[0].classList.toggle("rotate-45", isOpen);
        iconSpans[0].classList.toggle("translate-y-2", isOpen);
        iconSpans[1].classList.toggle("opacity-0", isOpen);
        iconSpans[1].classList.toggle("opacity-100", !isOpen);
        iconSpans[2].classList.toggle("-rotate-45", isOpen);
        iconSpans[2].classList.toggle("-translate-y-2", isOpen);
      }
    };

    document.addEventListener("click", (e) => {
      const target = e.target;
      const mobileMenu = document.getElementById("mobile-menu");

      if (!mobileMenu) return;

      const isMenuOpen = mobileMenu.classList.contains("translate-x-0");

      // Case 1: Click on the menu toggle button
      if (target.closest("#menu-toggle-btn")) {
        setMenuState(!isMenuOpen);
        return;
      }

      // Case 2: Click on the close button
      if (target.closest("#menu-close-btn")) {
        setMenuState(false);
        return;
      }

      // Case 3: Click on a mobile navigation link
      const navLink = target.closest(".mobile-nav-link");
      if (navLink && mobileMenu.contains(navLink)) {
        e.preventDefault();
        setMenuState(false);
        // Navigate after the closing animation
        setTimeout(() => {
          const href = navLink.getAttribute("href");
          if (href) {
            window.location.href = href;
          }
        }, 300);
      }
    });
  }
</script>
<style>
  /* Smooth transitions for the mobile menu */
  .transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
</style>
